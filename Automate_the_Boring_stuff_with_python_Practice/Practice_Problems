{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f287f492",
   "metadata": {},
   "source": [
    "# Practice Probelms P1C1 - Basics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a25b78a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(5>4) and (3==4) # False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "76c37fde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not (6>4) # False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "1213f919",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(5>4) or (3==5) #True"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "879a3f6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "not((5>4) or (3==5)) # False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "af3aa6f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(True and True) and (True == False) # False"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9ce8f847",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(not False) or (not True) # True"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a1e19dbb",
   "metadata": {},
   "source": [
    "# Practice Probelms P1C2 - Flow Control"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "91bb6e53",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2\n",
      "Howdy\n"
     ]
    }
   ],
   "source": [
    "# Write a code that prints Hello if 1 is stored in spam, prints  Howdy if 2 is\n",
    "# stored in spam, and prints Greetings! if anything else is stored in spam.\n",
    "\n",
    "spam = int(input())\n",
    "\n",
    "if spam == 1:\n",
    "    print('Hello')\n",
    "elif spam == 2:\n",
    "    print('Howdy')\n",
    "else:\n",
    "    print('Greetings')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "0c9b9a30",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4 5 6 7 8 9 10 "
     ]
    }
   ],
   "source": [
    "# Write program to print number 1 to 10 using for loop\n",
    "\n",
    "for i in range(1,11):\n",
    "    print(i, end = ' ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "d02b08a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 2 3 4 5 6 7 8 9 10 "
     ]
    }
   ],
   "source": [
    "# Write program to print number 1 to 10 using While loop\n",
    "\n",
    "i = 1\n",
    "while i<11:\n",
    "    print(i, end = ' ')\n",
    "    i += 1"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a471d627",
   "metadata": {},
   "source": [
    "# Practice Probelms P1C3 - Functions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "adefbe41",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "wrwt\n",
      "Enter an Integer\n",
      "7\n",
      "22\n",
      "3\n",
      "10\n",
      "1\n",
      "4\n",
      "2\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "def collatz(number):\n",
    "    if number % 2 == 0:\n",
    "        x = number // 2\n",
    "        print(x)\n",
    "        return x\n",
    "    if number % 2 != 0:\n",
    "        x = 3*number+1\n",
    "        print(x)\n",
    "        return x\n",
    "    \n",
    "Flag = False\n",
    "while Flag != 1:\n",
    "    try:\n",
    "        user = int(input())\n",
    "        if collatz(user) == 1:\n",
    "            Flag = True\n",
    "    except ValueError:\n",
    "        print(\"Enter an Integer\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fe7682a2",
   "metadata": {},
   "source": [
    "# Practice Probelms P1C4 - Lists"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "5e2a72a1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[2, 4, 'hello', 8, 10]\n"
     ]
    }
   ],
   "source": [
    "spam = [2,4,6,8,10]\n",
    "spam[2] = 'hello'\n",
    "print(spam)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e56bdefe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "None\n",
      "None\n",
      "[3.14, 2, 'cat', True, 99]\n",
      "[3.14, 2, 'cat', True, '23', 99]\n"
     ]
    }
   ],
   "source": [
    "bacon = [3.14,'cat',2,'cat',True]\n",
    "print(bacon.index('cat'))\n",
    "print(bacon.append(99))\n",
    "print(bacon.remove('cat'))\n",
    "print(bacon)\n",
    "bacon.insert(-1, '23')\n",
    "print(bacon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "c376faf2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(1, 2, 3, 4, 5, '5')\n"
     ]
    }
   ],
   "source": [
    "list1 = [1,2,3,4,5,'5']\n",
    "tuple1 = tuple(list1)\n",
    "print(tuple1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "a18d5633",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'apples, bananas, tofu, and cats'"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Comma Code\n",
    "\n",
    "def comma_removal(list1):\n",
    "    str = ''\n",
    "    for i in list1:\n",
    "        if i == list1[(len(list1) - 1)]:\n",
    "            str += 'and ' + i\n",
    "        else:\n",
    "            str += i + ', '\n",
    "    return str\n",
    "\n",
    "spam = ['apples', 'bananas', 'tofu', 'cats']\n",
    "comma_removal(spam)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "96dbacfd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[0, 0, 1], [0, 1, 1], [0, 0, 1]]\n"
     ]
    }
   ],
   "source": [
    "l = [[0,0,1],[0,1,1],[0,0,1]]\n",
    "print(l)\n",
    "grid = [['.', '.', '.', '.', '.', '.'],\n",
    "['.', 'O', 'O', '.', '.', '.'],\n",
    "['O', 'O', 'O', 'O', '.', '.'],\n",
    "['O', 'O', 'O', 'O', 'O', '.'],\n",
    "['.', 'O', 'O', 'O', 'O', 'O'],\n",
    "['O', 'O', 'O', 'O', 'O', '.'],\n",
    "['O', 'O', 'O', 'O', '.', '.'],\n",
    "['.', 'O', 'O', '.', '.', '.'],\n",
    "['.', '.', '.', '.', '.', '.']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "64a1fb01",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
